#!/bin/sh
# shellcheck disable=3043
set -e

GPKG_INSTALL_DIR="$HOME/.local"
GPKG_BUILD_DIR="$HOME/.cache/gpkg"
GPKG_PKG_DIR=${GPKG_PKG_DIR:-"$HOME/.gpkg.d"}

[ -d "$GPKG_INSTALL_DIR" ]	|| mkdir -p "$GPKG_INSTALL_DIR"
[ -d "$GPKG_BUILD_DIR" ]	|| mkdir -p "$GPKG_BUILD_DIR"
[ -d "$GPKG_PKG_DIR" ]		|| mkdir -p "$GPKG_PKG_DIR"

_gpkg_log_info() {
	printf "$(tput setaf 5)-->$(tput setaf 2) %s$(tput setaf 7)\n" "$@"
}

_gpkg_log_error() {
	printf "$(tput setaf 6)-->$(tput setaf 9) %s$(tput setaf 7)\n" "$@"
	exit 1
}

_gpkg_make() {
	make -C "$GPKG_BUILD_DIR/$GPKG_PKG_NAME" "$@"
}

_gpkg_fetch() {
	curl --silent --show-error --location --fail "$@"
}

_gpkg_configure() {
	cd "$GPKG_BUILD_DIR/$GPKG_PKG_NAME" &&
		./configure --prefix="$HOME/.local" "$@"
}

_gpkg_git_clone() {
	url=$1
	version=$2
	path=$3
	[ "$url" ]		|| _gpkg_log_error "_gpkg_git_clone missing url"
	[ "$path" ]		|| _gpkg_log_error "_gpkg_git_clone missing path"
	[ "$version" ]	|| _gpkg_log_error "_gpkg_git_clone missing version"

	if [ -d "$path/.git" ]; then
		_gpkg_log_info "Updating repo $path"
		git -C "$path" fetch
	else
		_gpkg_log_info "Cloning $url"
		git clone --recursive "$url" "$path"
	fi

	_gpkg_log_info "Resetting repository to $version"
	git -C "$path" reset --hard "$version"
	git -C "$path" clean -fd
}

_usage() {
	echo "USAGE:"
	echo "  gpkg CMD PKG"
	echo "  CMD:"
	echo "    install, i: install PKG"
	echo "    uninstall, u, remove: remove PKG"
	echo "    reinstall, r: reinstall PKG"
	echo "    list: list the available packages"
	echo "    help: print this help"
	exit 1
}

_load() {
	GPKG_PKG_NAME="$1"
	[ -n "$GPKG_PKG_NAME" ] || _usage
	[ -d "$GPKG_PKG_DIR/$GPKG_PKG_NAME" ] ||
		_gpkg_log_error "invalid package name: $GPKG_PKG_NAME"

	# shellcheck disable=1090
	. "$GPKG_PKG_DIR/$GPKG_PKG_NAME/pkg"
}

_list_pkg() {
	echo "PKGs:"
	for path in "$GPKG_PKG_DIR"/*; do
		[ -d "$path" ] || continue
		pkg=$(basename "$path")
		_load "$pkg"
		printf "  %-12s %s\n" "$pkg" "$(_gpkg_version)"
	done
}

_install() {
	local pkg="$1"
	_load "$pkg"
	_gpkg_log_info "Installing $pkg version $(_gpkg_version)..."
	_gpkg_install
	_gpkg_log_info "Done installing $pkg"
}

_uninstall() {
	local pkg="$1"
	_load "$pkg"
	_gpkg_log_info "Uninstalling $pkg"
	_gpkg_uninstall
	_gpkg_log_info "Done uninstalling $pkg"
}

case "$1" in
	install|i)          _install "$2" ;;
	uninstall|u|remove) _uninstall "$2" ;;
	reinstall|r)        _uninstall "$2" && _install "$2" ;;
	list)               _list_pkg ;;
	*)                  _usage ;;
esac
